#!/usr/bin/env python3

"""mbc-prime
Find group-specific primer binding sites for amplicon metabarcoding

Usage:
  mbc-prime [options] -t INT <msa.fa>

Options:
  -t --target-seqs INT    number of target sequences (from top of alignment)
  -l --primer-length INT  primer length [default: 20]
  -s --score NUM          minimum score for both conservation and discrimination
                          [default: 0.9]
  -v --verbose            print verbose information, such as partial alignments
                          for each primer locus

  -b --beta NUM           Use F-score instead of Matthews correlation coefficient.
                          Use `-b=1` for regular F-score/F1. Other values for
                          F-beta scoring emphazising either False Positives or
                          True Negative. [default: -1]
"""

import sys
from math import sqrt
from statistics import mean
from statistics import median 
from collections import Counter
from Bio import AlignIO
from Bio.Align import MultipleSeqAlignment
from docopt import docopt

def main():

    if len(sys.argv) == 1:
        sys.argv.append('-h')

    opt = docopt(__doc__, version='mbc-prime v0.3.0', options_first=True)
    print(opt)
    min_score = float(opt['--score'])
    primer_length = int(opt['--primer-length'])
    n_targets = int(opt['--target-seqs'])
    beta = float(opt['--beta'])

    msa = AlignIO.read(opt['<msa.fa>'], "fasta")
    contrasts = contrast_msa(msa, n_targets, primer_length, beta)

    behind = int(primer_length/2)
    ahead = primer_length - behind -1
    j=0;

    for i,(a,b,t,_,an, bn, s) in enumerate(contrasts):
        if t > min_score and s > min_score:
            j+=1;
            print(i+1, a, b, round((t+s)/2, 2), round(t,2), round(s,2),
                  "".join([f"{k}{v}" for k,v in an.most_common()]),
                  "".join([f"{k}{v}" for k,v in bn.most_common()]))
            if(opt['--verbose']):
                print(" "*behind + "*")
                print(msa[:n_targets, i-behind:i+ahead])
                print(msa[n_targets:, i-behind:i+ahead])
                print("-" * 80);
    print(f"Found {j} high-scoring loci")

def contrast_msa(msa, x, primer_length, beta):

    msa_len = msa.get_alignment_length()
    # msa = MultipleSeqAlignment([r.upper() for r in msa])
    
    cols = [list(score_column(msa[:x, i], msa[x:, i], beta)) for i in range(msa_len)]
    
    behind = int(primer_length/2)
    ahead = primer_length - behind -1
    pre = [float(0)] * behind
    post = [float(0)] * ahead
    consense = pre + mean_window([c[3] for c in cols], primer_length) + post
    [cols[i].append(s) for i,s in enumerate(consense)]
    return(cols)

            

def score_column(a, b, beta=-1):
    an = Counter(a)
    bn = Counter(b)
    (ac, TP) = an.most_common(1)[0]
    (bc, bnmc) = bn.most_common(1)[0]

    if ac == '-':
        return(ac, bc, 0, 0, an, bn)

    tn = len(a) - an['-']
    FN = tn - TP
    FP = bn[ac]
    TN = len(b) - FP - bn['-']
    if beta < 0:
        return (ac, bc, mcc(TP, TN, FP, FN), TP/tn, an, bn)
    else:
        return (ac, bc, fbeta(TP, FN, FP, float(beta)), TP/tn, an, bn)

# https://en.wikipedia.org/wiki/Phi_coefficient
def mcc(TP, TN, FP, FN):
    denom = (TP+FP) * (TP+FN) * (TN+FP) * (TN+FN)
    if denom == 0:
        denom = 1
    else:
        denom = sqrt(denom)
        
    return((TP * TN - FP * FN) / denom)

# https://en.wikipedia.org/wiki/F-score
def fbeta(TP, FN, FP, beta):
    b2 = beta**2
    return((1+b2)*TP / ((1+b2)*TP + b2*FN + FP))

# https://en.wikipedia.org/wiki/F-score
def fscore(TP, FN, FP):
    return(2*TP / (2*TP + FN + FP))

def fkoert(TP, FN, FP, penalty):
    return(2*TP / (2*TP + FN + penalty*FP)) #F = 2TP

def mean_window(x, window_size):
    i = 0
    means = [] 

    while i < len(x) - window_size + 1: 
        window = x[i : i + window_size] 
        means.append(sum(window) / window_size)
        i += 1
        
    return(means)
        
if __name__ == "__main__":
    main()
