#!/usr/bin/env python3

"""mbc-prime
Find group-specific primer binding sites for amplicon metabarcoding

Usage:
  mbc-prime [options] -t INT <msa.fa>

Options:
  -t --target-seqs INT    number of target sequences (from top of alignment)
  -l --primer-length INT  primer length [default: 20]
  -s --score NUM          minimum score for both conservation and discrimination
                          [default: 0.9]
  -v --verbose            print verbose information, such as partial alignments
                          for each primer locus

  -b --beta NUM           Use F-score instead of Matthews correlation coefficient.
                          Use `-b=1` for regular F-score/F1. Other values for
                          F-beta scoring emphazising either False Positives or
                          True Negative. [default: -1]
  -r --reverse            Shifts the window where conservation is calculated to a window for a reverse primer
"""

import sys
import numpy as np
from math import sqrt
from statistics import mean
from statistics import median 
from collections import Counter
from Bio import AlignIO
from Bio.Align import MultipleSeqAlignment
from docopt import docopt

def main():

    if len(sys.argv) == 1:
        sys.argv.append('-h')

    opt = docopt(__doc__, version='mbc-prime v0.3.0', options_first=True)
    print(opt)
    min_score = float(opt['--score'])
    primer_length = int(opt['--primer-length'])
    n_targets = int(opt['--target-seqs'])
    beta = float(opt['--beta'])
    reverse = opt['--reverse']

    if(reverse):
    	behind = 0
    	ahead = primer_length
    else:
        behind = primer_length -1
        ahead = 1
    
    msa = AlignIO.read(opt['<msa.fa>'], "fasta")
    msa = msa[0:,190:330]
    contrasts = contrast_msa(msa, n_targets, primer_length, min_score, beta)

    [print(e) for e in contrasts]
    
    for e in contrasts:
        print(e)
        if(opt['--verbose']):
            print(" "*behind + "*")
            print(msa[:n_targets, e["start"]:e["start"]+primer_length])
            print(msa[n_targets:, e["start"]:e["start"]+primer_length])
            sys.exit()
            print("-" * 80);
    print(f"Found {len(contrasts)} high-scoring loci")

def contrast_msa(msa, x, primer_length, min_score, beta):

    msa_len = msa.get_alignment_length()
    # TODO MSA trim gap cols

    # score each column
    cols = [list(score_column(msa[:x, i], msa[x:, i], beta)) for i in range(msa_len)]

    # aggregate across windows
    conserve = conserve_window([c[3] for c in cols], primer_length)
    contrast_fwd = contrast_window([c[2] for c in cols], primer_length)
    contrast_rev = contrast_window([c[2] for c in cols], primer_length, reverse=True)
    # inefficient, could compute consense windows only as needed after filter
    consense = consense_window([(c[0], c[1]) for c in cols], primer_length)

    wins_fwd = []
    wins_rev = []
    # filter windows
    for i,s in enumerate(conserve):
        if s > min_score:
            
            if contrast_fwd[i]["t"] > min_score:
                wins_fwd.append({
                    "start": i,
                    "s": round(conserve[i], 2),
                    "diff": consense[i],
                    "t": round(contrast_fwd[i]["t"], 2),
                    "t_wgt": [round(x, 2) for x in contrast_fwd[i]["t_wgt"]],
                    "t_raw": [round(x, 2) for x in contrast_fwd[i]["t_raw"]]
                })
            if contrast_rev[i]["t"] > min_score:
                wins_rev.append({
                    "start": i,
                    "s": conserve[i],
                    "t": contrast_rev[i]["t"],
                    "diff_fwd": consense[i]
                })

    return(wins_fwd)

            

def score_column(a, b, beta=-1):
    an = Counter(a)
    bn = Counter(b)
    (ac, TP) = an.most_common(1)[0]
    (bc, bnmc) = bn.most_common(1)[0]

    if ac == '-':
        return(ac, bc, 0, 0, an, bn)

    tn = len(a) - an['-']
    FN = tn - TP
    FP = bn[ac]
    TN = len(b) - FP - bn['-']
    if beta < 0:
        return (ac, bc, mcc(TP, TN, FP, FN), TP/tn, an, bn)
    else:
        return (ac, bc, fbeta(TP, FN, FP, float(beta)), TP/tn, an, bn)

# https://en.wikipedia.org/wiki/Phi_coefficient
def mcc(TP, TN, FP, FN):
    denom = (TP+FP) * (TP+FN) * (TN+FP) * (TN+FN)
    if denom == 0:
        denom = 1
    else:
        denom = sqrt(denom)
        
    return((TP * TN - FP * FN) / denom)

# https://en.wikipedia.org/wiki/F-score
def fbeta(TP, FN, FP, beta):
    b2 = beta**2
    return((1+b2)*TP / ((1+b2)*TP + b2*FN + FP))

# https://en.wikipedia.org/wiki/F-score
def fscore(TP, FN, FP):
    return(2*TP / (2*TP + FN + FP))

def fkoert(TP, FN, FP, penalty):
    return(2*TP / (2*TP + FN + penalty*FP)) #F = 2TP

def conserve_window(x, window_size):
    i = 0
    means = [] 

    while i < len(x) - window_size + 1: 
        window = x[i : i + window_size] 
        means.append(sum(window) / window_size)
        i += 1
        
    return(means)

def contrast_window(x, window_size, reverse=False):
    i = 0
    scores = list()
    weights = [(window_size - j) / window_size for j in range(window_size)]
    if not reverse:
        weights.reverse()
    
    while i < len(x) - window_size + 1: 
        w = x[i : i + window_size]
        w = top_q(w) # ignore lower scores
        s = [w[j] * weights[j] for j,_ in enumerate(w)] # weight scores by position
        scores.append({
            "t": sum(s),
            "t_raw": list(filter(lambda x: x > 0 , w)),
            "t_wgt": list(filter(lambda x: x > 0 , s))
         })
        i += 1

    return(scores)

def consense_pair(a, b):
    if a == b:
        return "."
    return(a)

def consense_window(x, window_size):
    i = 0
    x = [consense_pair(a,b) for a,b in x]
    consensi = []
    
    while i < len(x) - window_size + 1: 
        consensi.append("".join(x[i : i + window_size]))
        i += 1

    return(consensi)

def top_q(x, q=.5):
    r = [0 if k < q else k for k in x]
    return(r)

if __name__ == "__main__":
    main()
